const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");
const { BigNumber } = require("ethers");

describe("USDR - review", function () {
    let Token;
    let METL;
    let owner;
    let minter;
    let burner;
    let pauser;
    let freezer;
    let frozen;
    let pool;
    let user;

    const BASIS_RATE = 1000000000;
    let variableRate = 15000000;

    beforeEach(async function () {
        Token = await ethers.getContractFactory("METLV3");
        [owner, minter, burner, pauser, freezer, frozen, pool, user] =
            await ethers.getSigners();
        METL = await upgrades.deployProxy(Token);
        await METL.deployed();
    });

    it("Can pay less fees than expected in mint", async () => {
        let goodAmt = 10000000000000;
        let evilAmt = 10000014900000;
        let feesExpected = (goodAmt / BASIS_RATE) * variableRate;
        await METL.addWhitelist(pool.address);
        await METL.addMinter(minter.address);
        await METL.addController(owner.address);
        await METL.setFeeCollector(owner.address);
        await METL.connect(minter).feeBankMint(pool.address, goodAmt, "Test");
        expect(await METL.balanceOf(owner.address)).to.equal(feesExpected);

        await METL.connect(minter).feeBankMint(pool.address, evilAmt, "Test");
        expect(await METL.balanceOf(owner.address)).to.equal(feesExpected * 2);
    });

    it("Can pay less fees than expected in burn", async () => {
        let goodAmt = 10000000000000;
        let evilAmt = 10000014900000;
        let feesExpected = (goodAmt / BASIS_RATE) * variableRate;
        await METL.addWhitelist(pool.address);
        await METL.addMinter(minter.address);
        await METL.addBurner(burner.address);
        await METL.addController(owner.address);
        await METL.setFeeCollector(owner.address);
        await METL.connect(minter).feeBankMint(pool.address, goodAmt*2, "Test");
        await METL.connect(burner).feeBankBurn(pool.address, evilAmt);
        expect(await METL.balanceOf(owner.address)).to.equal(feesExpected * 3);
    });
});
